# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# I am not too proud to admit that #http://radiusofcircle.blogspot.com helped me understand this.

from functools import reduce

def calculate_divisors(max, begin):
    n = begin
    while True:
        # prime number
        i = 2
        answer_dict = {}
        # already know this is 5.
        
        # get next triangle number.
        triangle_number = n*(n+1)/2
        n += 1

        while i <= triangle_number:
            if triangle_number % i == 0:
                triangle_number = triangle_number/ i

                # Especially this site: 
                # http://mathcentral.uregina.ca/QQ/database/QQ.02.06/joe1.html
                if i in answer_dict:
                    answer_dict[i] += 1
                else:
                    answer_dict[i] =1
                i-=1
            i += 1 
        
        powers = map(lambda x:(x+1),answer_dict.values())
        divisors = reduce(lambda x,y:x*y, powers)
        if divisors > max:
            return ((n)*(n-1)/2)
            break

if __name__ == "__main__":
    print(calculate_divisors(500,8))
